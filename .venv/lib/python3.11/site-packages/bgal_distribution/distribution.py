import numpy as np
from . import mle
from . import gof

class BGALDistribution:
    def __init__(self, delta=None, r=None, mu=None):
        self.delta = delta
        self.r = r
        self.mu = mu

    def fit(self, X, y):
        self.delta = mle.delta_MLE(X, y)
        w_d = mle.w(X, y, self.delta)
        self.r = mle.r_MLE(w_d)
        self.mu = mle.mu_MLE(X, y, self.delta)

    def mle_params(self):
        return {
            "delta": self.delta,
            "r": self.r,
            "mu": self.mu
        }

    def rvs(self, size, X_data=None):
        if self.delta is None or self.r is None or self.mu is None:
            raise ValueError("Distribution parameters not fitted. Call fit() first.")
        if X_data is None:
            X_data = np.random.gamma(shape=2, scale=2, size=size) # Example: Gamma distribution for X
        Z = np.random.normal(size=size) # Standard normal for Z
        sigma = self.r
        delta = self.delta
        mu = self.mu
        y_samples = delta + mu * X_data + sigma * np.sqrt(X_data) * Z
        return y_samples

    def goodness_of_fit(self, data, X_data=None):
        """
        Perform Anderson-Darling test for goodness of fit.

        Null Hypothesis: The data follows a BGAL distribution.

        Returns:
         Anderson-Darling statistic, p-value, and interpretation.
        """
        statistic, p_value = gof.anderson_darling_test(self, data, X_data)
        interpretation = "Fail to reject null hypothesis: Data may follow BGAL distribution." if p_value > 0.05 else "Reject null hypothesis: Data does not follow BGAL distribution."
        return {
            "statistic": statistic,
            "p_value": p_value,
            "null_hypothesis": "Data follows a BGAL distribution",
            "interpretation": interpretation
        }
